Step 3: Store Item’s position

Problem:

While solving our delete problem, we accidentally increased our access operation time to O(n).
 How?

 Note that all of item-keys sharing same frequency are in a list.
 Now if one of these items is accessed, how do we move it to list of next frequency?

  We will have to iterate through the list first to find the item, which in worst-case will take O(n)! (if all items with same frequency)  operations.


To solve the problem, we somehow need to jump directly to that item in the list without iteration.
  If we can do that, it will be easier to delete the item and add it to end of next frequency list.

Unfortunately, this is not possible using our in-built data structures.
 We need to create a new one (mentioned in the paper).

 Solution

 We need to store each item’s position.

 We will create a simple class which stores item’s key, value and its position in the list.
 We will convert the linked list to
